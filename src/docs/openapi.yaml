openapi: 3.0.3
info:
  title: Lec-Q API
  description: >
    Lec-Q는 대규모 비대면 강의 환경에서 학습 격차를 줄이기 위한
    AI 기반 실시간 학습 보조 플랫폼입니다.
  version: 1.0.0

servers:
  - url: http://localhost:3000/api/v1
    description: Local development server

tags:
  - name: Auth
    description: 회원가입 및 로그인
  - name: Lectures
    description: 강의 조회 및 관리
  - name: Questions
    description: 질문 관련 API
  - name: Reports
    description: 학습 리포트 관련 API

paths:
  /auth/signup:
    post:
      tags: [Auth]
      summary: 회원가입
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
                name:
                  type: string
                role:
                  type: string
                  enum: [student, instructor]
                phoneNumber:
                  type: string
                  example: "010-1234-5678"
                birthDate:
                  type: string
                  format: date
                  example: "2000-01-15"
              required: [email, password, name, role, phoneNumber, birthDate]
      responses:
        "201":
          description: 회원가입 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId: { type: string }
                  message: { type: string }

  /auth/login:
    post:
      tags: [Auth]
      summary: 로그인
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required: [email, password]
      responses:
        "200":
          description: 로그인 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken: { type: string }
                  refreshToken: { type: string }

  /lectures:
    get:
      tags: [Lectures]
      summary: 강의 목록 조회
      responses:
        "200":
          description: 강의 리스트
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    lectureId: { type: string }
                    title: { type: string }
                    professor: { type: string }
                    status:
                      type: string
                      enum: [ongoing, ended]

    post:
      tags: [Lectures]
      summary: 강의 생성 (교수 전용)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                professor: { type: string }
              required: [title, professor]
      responses:
        "201":
          description: 강의 생성 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  lectureId: { type: string }
                  message: { type: string }

  /lectures/{lectureId}:
    get:
      tags: [Lectures]
      summary: 강의 상세 조회
      parameters:
        - name: lectureId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 강의 상세 정보
          content:
            application/json:
              schema:
                type: object
                properties:
                  lectureId: { type: string }
                  title: { type: string }
                  professor: { type: string }
                  status: { type: string }
                  description: { type: string }

  /lectures/{lectureId}/questions:
    post:
      tags: [Questions]
      summary: 특정 강의에 질문 등록
      parameters:
        - name: lectureId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                page: { type: integer, example: 12 }
                content: { type: string, example: "이 부분 다시 설명해주세요" }
                anonymous: { type: boolean, default: true }
              required: [content]
      responses:
        "201":
          description: 질문 등록 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  questionId: { type: string }
                  lectureId: { type: string }
                  content: { type: string }
                  anonymous: { type: boolean }
                  createdAt: { type: string, format: date-time }

    get:
      tags: [Questions]
      summary: 특정 강의의 질문 목록 조회
      parameters:
        - name: lectureId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 질문 목록
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    questionId: { type: string }
                    lectureId: { type: string }
                    content: { type: string }
                    anonymous: { type: boolean }
                    createdAt: { type: string, format: date-time }

  /lectures/questions/{questionId}:
    get:
      tags: [Questions]
      summary: 특정 질문 상세 조회
      parameters:
        - name: questionId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 질문 상세 정보
          content:
            application/json:
              schema:
                type: object
                properties:
                  questionId: { type: string }
                  lectureId: { type: string }
                  content: { type: string }
                  page: { type: integer }
                  anonymous: { type: boolean }
                  createdAt: { type: string, format: date-time }

  /reports/lecture/{lectureId}:
    get:
      tags: [Reports]
      summary: 강의 리포트 조회
      parameters:
        - name: lectureId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 강의 리포트 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  lectureId: { type: string }
                  summary: { type: string }
                  difficultSections:
                    type: array
                    items: { type: string }
                  recommendations: { type: string }

  /reports/user/{userId}:
    get:
      tags: [Reports]
      summary: 사용자 개인 리포트 조회
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 사용자 리포트 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId: { type: string }
                  progress: { type: string }
                  strengths:
                    type: array
                    items: { type: string }
                  weaknesses:
                    type: array
                    items: { type: string }
                  nextSteps: { type: string }

    post:
      tags: [Reports]
      summary: 사용자 리포트 생성
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                progress: { type: string, example: "80%" }
                strengths:
                  type: array
                  items: { type: string }
                weaknesses:
                  type: array
                  items: { type: string }
                nextSteps: { type: string, example: "운영체제 복습 권장" }
      responses:
        "201":
          description: 리포트 생성 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  reportId: { type: string }
                  message: { type: string }

    put:
      tags: [Reports]
      summary: 사용자 리포트 업데이트
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                progress: { type: string }
                strengths:
                  type: array
                  items: { type: string }
                weaknesses:
                  type: array
                  items: { type: string }
                nextSteps: { type: string }
      responses:
        "200":
          description: 리포트 업데이트 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  reportId: { type: string }
                  message: { type: string }
